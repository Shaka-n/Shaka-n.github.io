<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.1.1">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2020-09-11T17:44:55-04:00</updated><id>http://localhost:4000/feed.xml</id><title type="html">Your awesome title</title><subtitle>Write an awesome description for your new site here. You can edit this line in _config.yml. It will appear in your document head meta (for Google search results) and in your feed.xml site description.</subtitle><entry><title type="html">Welcome to Jekyll!</title><link href="http://localhost:4000/jekyll/update/2020/09/10/welcome-to-jekyll.html" rel="alternate" type="text/html" title="Welcome to Jekyll!" /><published>2020-09-10T12:12:01-04:00</published><updated>2020-09-10T12:12:01-04:00</updated><id>http://localhost:4000/jekyll/update/2020/09/10/welcome-to-jekyll</id><content type="html" xml:base="http://localhost:4000/jekyll/update/2020/09/10/welcome-to-jekyll.html">&lt;p&gt;You’ll find this post in your &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;_posts&lt;/code&gt; directory. Go ahead and edit it and re-build the site to see your changes. You can rebuild the site in many different ways, but the most common way is to run &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;jekyll serve&lt;/code&gt;, which launches a web server and auto-regenerates your site when a file is updated.&lt;/p&gt;

&lt;p&gt;Jekyll requires blog post files to be named according to the following format:&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;YEAR-MONTH-DAY-title.MARKUP&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Where &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;YEAR&lt;/code&gt; is a four-digit number, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;MONTH&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;DAY&lt;/code&gt; are both two-digit numbers, and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;MARKUP&lt;/code&gt; is the file extension representing the format used in the file. After that, include the necessary front matter. Take a look at the source for this post to get an idea about how it works.&lt;/p&gt;

&lt;p&gt;Jekyll also offers powerful support for code snippets:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;print_hi&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Hi, &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;print_hi&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'Tom'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;#=&amp;gt; prints 'Hi, Tom' to STDOUT.&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Check out the &lt;a href=&quot;https://jekyllrb.com/docs/home&quot;&gt;Jekyll docs&lt;/a&gt; for more info on how to get the most out of Jekyll. File all bugs/feature requests at &lt;a href=&quot;https://github.com/jekyll/jekyll&quot;&gt;Jekyll’s GitHub repo&lt;/a&gt;. If you have questions, you can ask them on &lt;a href=&quot;https://talk.jekyllrb.com/&quot;&gt;Jekyll Talk&lt;/a&gt;.&lt;/p&gt;</content><author><name></name></author><category term="jekyll" /><category term="update" /><summary type="html">You’ll find this post in your _posts directory. Go ahead and edit it and re-build the site to see your changes. You can rebuild the site in many different ways, but the most common way is to run jekyll serve, which launches a web server and auto-regenerates your site when a file is updated.</summary></entry><entry><title type="html">Externalizing Thoughts</title><link href="http://localhost:4000/meta,/productivity,/applications/2020/09/10/20-externalizing-thought.html" rel="alternate" type="text/html" title="Externalizing Thoughts" /><published>2020-09-10T12:12:01-04:00</published><updated>2020-09-10T12:12:01-04:00</updated><id>http://localhost:4000/meta,/productivity,/applications/2020/09/10/20-externalizing-thought</id><content type="html" xml:base="http://localhost:4000/meta,/productivity,/applications/2020/09/10/20-externalizing-thought.html">&lt;p&gt;I’ve used dozens of note taking applications in my life. The unspoken question is: why? In the years before cloud storage note apps, MS Word was good enough for me. I had a folder called “Documents,” which in itself contained more folders called banal things like “School,” or “Receipts,” or “Restricted Access, Do Not Open!!” Things were simpler, and I felt organized, clean, and in control of my extra-cerebral faculties. More on that later. Then one day, The Cloud rolled into town.&lt;/p&gt;

&lt;p&gt;After looming on the horizon for decades, infrastructure and manufacturing developments finally ushered in (what I consider to be) the more substantive version of the cloud – i.e. a paradigm shift away from local storage in client machines. In the enterprise world, this translated to tectonic shifts in the market, far beyond the scope of this blog. But to the user, this meant a fundamental cognitive shift. For this user in particular, it meant an end to that feeling of clean organization and the beginning of the endless search for The Note App.&lt;/p&gt;

&lt;p&gt;Most famously, Google Docs arrived on the scene in 2006. Offering a stripped down word processing experience that would be familiar enough to MS Word users to be usable, and free enough to be attractive to students and low income users. Its early iterations were a bit unreliable, and there was no need to switch right away since so many people had been forced to purchase a license to MS Word for their existing needs. Keep in mind this was back when one could still buy a non-expirant software license. One didn’t consider Google Docs until one had to buy a new computer because one’s old MS Office license would not be transferable between machines. So, do you shell a couple hundred bucks for the massively bloated MS Office? What about just buying a license for MS Word? (Don’t even get me started on OpenOffice.)&lt;/p&gt;

&lt;p&gt;Personally, this decision came up when I went off to college in 2011. Luckily for me, my university offered discounted licenses. Not everyone was so fortunate, and those that couldn’t justify the expense began to make the switch. For an individual user this was a relatively trivial decision. But at the level of the organization and enterprise, this became a serious matter. Does everyone really need MS Word? They’re just writing up reports, papers, notes, etc. Do they need all of those features? What’s better than free?&lt;/p&gt;

&lt;p&gt;As The Cloud matured, and the choice between bloated vs. free became more prevalent, businesses adopted it and users became acustomed to it. Rome fell, and the provinces began to splinter into the galaxy of note taking and productivity apps that you see today. It’s not uncommon now for a billion dollar corporation to equip the entirety of it’s workforce with Google Suite, and Microsoft of course offers it’s own cloud solutions. But that’s for the punters. The real heads know that you gotta have a cool note-taking app.&lt;/p&gt;

&lt;p&gt;What’s a “cool” note-taking app? I’m talking about Notion, Bear, Evernote, OneNote, SimpleNote, Roam Research, Google Keep, Apple Notes, Ulysses, Standard Notes, etc. I’m talking about using an IDE like Atom as a content management sytem for your personal website. I’m talking about using Jekyll and markdown to make a blog for GitHub Pages (&lt;em&gt;cough&lt;/em&gt;). I’m talking about using Ommwriter to completely cut yourself off from distraction so you can focus on the important work of paying attention to what you’re typing. I’m talking about a custom-built, tailored solution for the dramatically important task of writing something down so you don’t lose track of the information. But which one to use?&lt;/p&gt;

&lt;p&gt;There are of course, pros and cons to each. So many pros and cons, that reaching a decision becomes overwhelming. Evernote is slow and of dubious longevity, but has great organizational tools. Bear is simple and straightforward, limitingly so. Google Keep is most effectively used as a kind of digital sticky note. Google Docs is a full bore word processor at this point, but also has some gaps in its feature set that become apparent as soon as you begin to consider more complex formatting. The obvious choice would be to try all of them and see which one works best for you. Do you have time for that? How long do you have to use an application before you can reach a definitive conclusion on its efficacy? A day? A week? In this search for the perfect word processor, are you concerned about losing any documents of even middling importance? Where do the actual files live? Do they automatically save them as files at all? Or do you have to manually export each of them? We haven’t even begun to consider the security of these applications and how exactly they manage to make them free (i.e. they’re not free, they scan your documents for meta data to sell to researchers and marketers). It’s all a very complex calculation for what should be a simple problem, and the opportunity cost is potentially massive.&lt;/p&gt;

&lt;p&gt;At this point, you may have noticed that I’ve been lumping together apps that might not deserve to be compared to each other. Google Docs and Bear are two different products that are supposed to have two different applications. This is where I want to make my actual point: if they are not, they should be.&lt;/p&gt;

&lt;p&gt;The need to be able to commit complex thought to an external medium and relate it to other complex thoughts within the same or similar medium is the ultimate end goal of “the note taking app.” Further, this is largely the end goal of information science and the internet in general. The process of developing and abstracting the note taking app is a process wherein industry is engaged with this problem of expanding human consciounesses to an external medium. I would argue that the smaller, spin-off products of this endeavor (i.e. Keep, Bear, etc.) are commodifications of the progress towards this end goal, and in fact actually hamper progress towards it. Because, ultimately, there should only be one note taking app. You should be able to write a one line file that reminds you about your dentist appointment. You should be able to write a novel. You should be able to keep a vast collection of research notes and interconnect nodes within your own body of work with nodes within the body of work of another. All of these tasks are extensions of conscious thought, and as such, deserve to be nodes within the same system. Would you connect your dentist appointment to your thesis paper? Probably not. But no thought exists in a vacuum, and it should be a matter of choice what belongs in a given network, not a matter of incompatible systems. Plus, a user simplely shouldn’t have to maintain all of these separate applications. Unfortunately, I highly doubt that we will see such an application within our lifetime.&lt;/p&gt;

&lt;p&gt;If there is one product, there will be two. Artificial choice will be generated by corporations attempting to create fissures in the consumer base through marketing and circumstance created by high-level business manuveuring. If the one, omnipotent Note Taking App is finally developed by one company, it will swiftly be duplicated by rivaling firms. Users will be divided along lines of legacy systems and short-term incentives. Your employer will use Omni-App Alpha, but you will have been accustomed to using Omni-App Omega at school, and you will forever be forced to jump between the two, largely, similar, but frustratingly different and incompatible interfaces.&lt;/p&gt;

&lt;p&gt;So what to do? Get off the grid: forsake your material possessions and return to the forest. Write all of your documents as .txt files and store them in a folder on a custom Linux distro. Perhaps back up this parent folder in an external harddrive and bury it in the earth. Copy and paste your documents into the CMS of the day. Take up scrimshaw and worship the moon.&lt;/p&gt;

&lt;p&gt;There is no right answer, unfortunately. Commitment to a given product will give you a sense of organization and clarity for a time, but it by no means will save you from eventually being forced or enticed into a new product. Assigning specific use cases to different apps can give you a sense of (useful) functional fixedness that can boost focus. But you will still need 3-4 applications, and at times just as many sets of login credentials. Unfortunately, I think this will be my solution for the forseeable future.&lt;/p&gt;</content><author><name></name></author><category term="Meta," /><category term="Productivity," /><category term="Applications" /><summary type="html">I’ve used dozens of note taking applications in my life. The unspoken question is: why? In the years before cloud storage note apps, MS Word was good enough for me. I had a folder called “Documents,” which in itself contained more folders called banal things like “School,” or “Receipts,” or “Restricted Access, Do Not Open!!” Things were simpler, and I felt organized, clean, and in control of my extra-cerebral faculties. More on that later. Then one day, The Cloud rolled into town.</summary></entry></feed>